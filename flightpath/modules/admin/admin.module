<?php

/**
 * @file
 * The administrative configurations for FlightPath.
 * 
 * 
 */

 
 
 
 
/**
 * Implementation of hook_menu
 * 
 */
function admin_menu() { 
  $items = array();
   
   
  $items["admin-tools"] = array(
     "title" => "Admin Tools",
     "page_callback" => "admin_display_tools_screen",
     "access_arguments" => array("can_access_admin_tools"),
     "tab_family" => "admin",
     "page_settings" => array(
       "page_hide_report_error" => TRUE,
     ),     
     "type" => MENU_TYPE_NORMAL_ITEM,
  );
   
   
   
  $items["admin-tools/admin"] = array(
     "title" => t("FlightPath Admin Console"),
     "description" => t("This area contains the bulk of settings, degree entry, and other configurations for FlightPath."),
     "page_callback" => "admin_display_main",
     "access_arguments" => array("can_access_admin"),
     "page_settings" => array(
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Tools",
          "path" => "admin-tools",          
        ),        
      ),  
      "menu_icon" => fp_get_module_path('system') . "/icons/FlightPath_Academics_plane_only.png",   
     ),     
     'weight' => 999,
     "type" => MENU_TYPE_NORMAL_ITEM,
  );
  
  $items["admin/config/urgent-message"] = array(
    "title" => "Edit urgent message",
    "description" => "Set a message which will be displayed to all users on every page",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_urgent_message_form", "system_settings"),
    "access_arguments" => array("can_edit_urgent_message"),
    "page_settings" => array(      
      "menu_icon" => fp_get_module_path('admin') . "/icons/error.png",
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,        
  );     
  

  
  $items["admin/config/watchdog"] = array(
    "title" => "Watchdog (logs)",
    "description" => "View log messages from throughout the system",
    "page_callback" => "admin_display_watchdog",    
    "access_arguments" => array("display_watchdog"),
    "page_settings" => array(
      
      "menu_icon" => fp_get_module_path('system') . "/icons/application_view_list.png",            
      "page_show_title" => TRUE,
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,   
  );       



  $items["admin/config/watchdog/%"] = array(
    "title" => "View Watchdog Entry",    
    "page_callback" => "admin_display_watchdog_entry",
    "page_arguments" => array(3),    
    "access_arguments" => array("display_watchdog"),
    "page_settings" => array(
      
      "page_show_title" => TRUE,
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Watchdog",
          "path" => "admin/config/watchdog",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%&sev_filter=%SEV_FILTER%&page=%PAGE%&type_filter=%TYPE_FILTER%",
        ),
                
      ),
    ),    
    "type" => MENU_TYPE_CALLBACK,   
  );      


  
  $items["admin/duplicate-year"] = array(
    "title" => "Duplicate entire catalog year",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_duplicate_year_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",      
  );
  
  
  
  $items["admin/edit-advising-settings"] = array(
    "title" => "Edit advising settings",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_advising_settings_form", "system_settings"),
    "access_arguments" => array("can_edit_advising_settings"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",    
  );     
  
     
  $items["admin/apply-draft-changes"] = array(
    "title" => "Apply draft changes",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_apply_draft_changes_form"),
    "access_arguments" => array("can_apply_draft_changes"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(         
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "type" => MENU_TYPE_NORMAL_ITEM,
    "tab_parent" => "admin-tools/admin",      
  );
   
   ///////////////////////////////////////////////////////
  ////////////////////// Degree Editing /////////////////// 
   
  $items["admin/degrees"] = array(
    "title" => "Degrees",
    "page_callback" => "admin_display_degrees",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,    
  );
   
  
  $items["admin/degrees/edit-degree/%/%"] = array(
    "title" => "Edit Degree",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_edit_degree_form", "normal", 3, 4),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Degrees",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,        
  );     
  
  
  
  
  $items["admin/degrees/popup-add-group"] = array(
    "title" => "Add Group",
    "page_callback" => "admin_display_degrees_popup_add_group",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  $items["admin/degrees/popup-add-group2"] = array(
    "title" => "Add Group",
    "page_callback" => "admin_display_degrees_popup_add_group2",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     
  
  
  
  
  $items["admin/degrees/add-degree"] = array(
    "title" => "Add Degree",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_add_degree_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Degrees",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
  );     
  
  $items["admin/degrees/copy-degree"] = array(
    "title" => "Copy Degree",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_copy_degree_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Degrees",
          "path" => "admin/degrees",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.degrees.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     
  


   ///////////////////////////////////////////////////////
  ////////////////////// Group Editing /////////////////// 
   
  $items["admin/groups"] = array(
    "title" => "Groups",
    "page_callback" => "admin_display_groups",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_NORMAL_ITEM
  );

  $items["admin/groups/edit-group"] = array(
    "title" => "Edit Group",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_edit_group_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Groups",
          "path" => "admin/groups",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
  );     
     
     
  $items["admin/groups/popup-select-icon"] = array(
    "title" => "Select Icon",
    "page_callback" => "admin_display_groups_popup_select_icon",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     
     
  $items["admin/groups/popup-edit-definition"] = array(
    "title" => "Edit Definition",
    "page_callback" => "admin_display_groups_popup_edit_definition",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  $items["admin/groups/popup-show-group-use"] = array(
    "title" => "Group Use",
    "page_callback" => "admin_display_groups_popup_show_group_use",
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      "page_is_popup" => TRUE,
      "page_hide_report_error" => TRUE,
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_CALLBACK,
  );     

  $items["admin/groups/process-all-definitions"] = array(
    "title" => "Process all Definitions",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_process_all_definitions_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Groups",
          "path" => "admin/groups",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.groups.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
  );     
          
     
  /////////////////////////////////////////////////
  /////////////////// Courses editing ////////////////
  $items["admin/courses"] = array(
    "title" => "Courses",
    "page_callback" => "admin_display_courses",
    "access_arguments" => array("can_access_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),    
    "file" => menu_get_module_path("admin") . "/admin.courses.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
  );  
     
  $items["admin/courses/edit-course"] = array(
    "title" => "Edit Course",
    "page_callback" => "fp_render_form",
    "page_arguments" => array("admin_edit_course_form"),
    "access_arguments" => array("can_edit_data_entry"),
    "page_settings" => array(
      
      
      "page_hide_report_error" => TRUE,
      "menu_links" => array(
        0 => array(
          "text" => "Admin Console",
          "path" => "admin-tools/admin",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
        1 => array(
          "text" => "Courses",
          "path" => "admin/courses",
          "query" => "de_catalog_year=%DE_CATALOG_YEAR%",
        ),
      ),
    ),   
    "file" => menu_get_module_path("admin") . "/admin.courses.inc",
    "type" => MENU_TYPE_NORMAL_ITEM,
  );     
          
          
     
     
  return $items;
}




/**
 * This page displays all the tools that the user has access to use.
 */
function admin_display_tools_screen() {
    
  fp_add_css(fp_get_module_path("admin") . '/css/admin.css');
  $rtn = "";
  
  
  $rtn .= "<div class='display-admin-tools-page'>"; 
  
  
  $rtn .= fp_render_menu_block("", "admin-tools");
  
  $rtn .= "</div>";
  
  
  
  
  
  return $rtn;
}






/**
 * hook_cron
 */
function admin_cron() {
  
  // Delete courses and groups which has been marked with "delete_flag = 1"
  
  $last_run = intval(variable_get("admin_last_run_delete_flag_removal", 0));
  $check_against = strtotime("NOW - 7 DAYS");  // don't run any more often than once every 7 days
  $c = 0;
  if ($check_against > $last_run) {
    
    $res = db_query("DELETE FROM draft_courses 
                     WHERE delete_flag = 1 ");
    $c = db_affected_rows($res);
    
    watchdog("admin", "Delete from flagged draft_courses db complete. $c items removed.", array(), WATCHDOG_DEBUG);



    $res = db_query("SELECT * FROM draft_groups 
                     WHERE delete_flag = 1 ");
    while ($cur = db_fetch_object($res)) {
      
      $group_id = $cur->group_id;
      $res2 = db_query("DELETE FROM draft_group_requirements WHERE group_id = ?", array($group_id));
      
      db_query("DELETE FROM draft_groups WHERE group_id = ?", array($group_id));
      $c++;
    }
    
    watchdog("admin", "Delete from flagged draft_groups db complete. $c items removed.", array(), WATCHDOG_DEBUG);

    variable_set("admin_last_run_delete_flag_removal", time());
    
    
  } // check against > last_run, so we should do it.
  
  
  
} // hook_cron







/**
 * This form will allow the user to duplicate an entire year's worth of data to a new
 * catalog year.
 *
 */
function admin_duplicate_year_form() {
  $form = array();
  
  $m = 0;
  $form["mark" . $m++] = array(
    "value" => "<p>" . t("This form will allow you to duplicate an entire year's worth of data
                 (courses, degrees, groups) into a new year.  This is used to create a new
                 year of data, based on the previous year, for example. <b>It will completely
                 delete the 'destination' year data, if it already exists!</b>  Use carefully.
                 <br><br>
                 The new year will be placed in DRAFT, and will not be visible in FlightPath
                 until draft changes are applied.
                 <br><br>
                 <u>It would be wise</u> to back up your database before proceeding.") . "</p><hr>",
  );
  
  $form["source_year"] = array(
    "type" => "textfield",
    "label" => t("Source year:"),
    "size" => 10,
    "required" => TRUE,
    "description" => t("Enter the 4-digit source year you are copying FROM.  For example,
                        2007.  If you are copying from '2007-2008' then just enter
                        2007."),
  );
  
  $form["destination_year"] = array(
    "type" => "textfield",
    "label" => t("Destination year:"),
    "size" => 10,
    "required" => TRUE,
    "description" => t("Enter the 4-digit source year you are copying TO.  <b><u>If this year
                        all ready exists in the system, all data for this year will be DELETED.</u></b>
                        If you are copying to '2009-2010' then just enter
                        2009."),
  );  
  
 $form["passcode"] = array(
    "type" => "password",
    "label" => t("For added security, you must enter the Apply Draft Changes password:"),
    "required" => TRUE,
    "description" => t("This is a password set up in FlightPath's settings, to provide an extra layer
                        of security for this powerful action.  Draft changes will not actually be applied,
                        this is simply used as an added layer of security."),
        
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Submit"),
    "spinner" => TRUE,
    "description" => t("This action may take <b><u>several moments</u></b> to complete."),
    "prefix" => "<hr>",
  );  
  
  
  
  return $form;
}


/**
 * This function should perform the actual copy of data!
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function admin_duplicate_year_form_submit($form, &$form_state) {
      
    
  set_time_limit (300);  // Extend time limit since this may take a little while.    
  $values = $form_state["values"];
    
  
  // Check to make sure they entered the transfer passcode correctly.
  $db = get_global_database_handler();    
  
  if ($values["passcode"] != variable_get("admin_transfer_passcode", sha1(mt_rand()))) {

    form_error("passcode", t("Error!  The password you entered is not correct.  Check with the FlightPath administrator
                              (or check the admin settings pages) to learn the password."));
    return;
    
  }


  // Okay, we made it this far, let's proceed with the copy!
  $new_year = $values["destination_year"];
  $old_year = $values["source_year"];
  
  $form_state['duplication']['src_catalog_year'] = $old_year;
  $form_state['duplication']['dest_catalog_year'] = $new_year;
  
  /////////////////////////////////////////////////////////////////////
  // We must first begin by deleting any entries for the new_year
  // from our tables.  This is because we may have to run the parser
  // more than once while debugging and such.
  $res = db_query("DELETE FROM draft_courses WHERE `catalog_year`= ? ", $new_year);
  
  
  $res = db_query("DELETE FROM draft_degree_tracks WHERE `catalog_year` = ? ", $new_year);
  // For degrees, we first need to select all of the new_year degrees.
  $res = db_query("SELECT * FROM draft_degrees WHERE `catalog_year` = ? ", $new_year);
  while ($cur = db_fetch_array($res)) {
    $res2 = db_query("DELETE FROM draft_degree_requirements WHERE `degree_id`='{$cur["degree_id"]}' ");
  }
  
  $res = db_query("DELETE FROM draft_degrees WHERE `catalog_year`=? ", $new_year);
  // For groups, begin by selecting all the groups in that year...
  $res = db_query("SELECT * FROM draft_groups WHERE `catalog_year`=? ", $new_year);
  while ($cur = db_fetch_array($res))
  {
    // Now, select all the requirements and see if there are any sub groups...
    $res2 = db_query("SELECT * FROM draft_group_requirements WHERE `group_id`='{$cur["group_id"]}' ");
    while ($cur2 = db_fetch_array($res2))
    {
      if ($cur2["child_group_id"] > 0)
      {
        // Delete the child group.
        $res3 = db_query("DELETE FROM draft_group_requirements WHERE `group_id`='{$cur2["child_group_id"]}' ");
      }
    }
    // Now, delete the original requirement.
    $res3 = db_query("DELETE FROM draft_group_requirements WHERE `group_id`='{$cur["group_id"]}' ");
  }
  $res = db_query("DELETE FROM draft_groups WHERE `catalog_year`=? ", $new_year);
  //////////////////////////////////////////////////////////////////////////
  
  //  Okay, we have deleted any possible old entries for the new year.
  
      
  
  /////////////////////////////////////////////////////////////////////////
  // Our first step is to copy all of the courses from the old_year to the new_year.  
  $res = db_query("SELECT * FROM draft_courses WHERE `catalog_year`=? ", $old_year);
  while ($cur = db_fetch_array($res))
  {
    extract($cur, 3, "db");
  
    $course = new Course($db_course_id, false, $db, false, $old_year);
    $course->subject_id = $db_subject_id;
    $course->course_num = $db_course_num;
    $course->db_exclude = $db_exclude;
    $course->min_hours = $db_min_hours;
    $course->max_hours = $db_max_hours;
    $course->repeat_hours = $db_repeat_hours;
    $course->school_id = $db_school_id;
        
    // Now, duplicate it for the new_year.
    $db->duplicate_course_for_year($course, $new_year);
  
    // Store what courses we are working on, for other modules.
    $form_state['courses'][] = $db_course_id;  
  
  }
   
  
    
  //////////////////////////////////////////////////////////////////////////
  //  Now, let's copy over the groups.  
  $group_id_array = array();
  $subgroup_id_array = array();
  
  $res = db_query("SELECT * FROM draft_groups WHERE `catalog_year`=? ", $old_year);
  while ($cur = db_fetch_array($res))
  {
    extract($cur, 3, "db");
    // First, let's request a new group ID for this new group.
    $new_group_id = $db->request_new_group_id();
    $group_id_array[$db_group_id] = $new_group_id;
  
    //$db_data_entry_comment = mysql_real_escape_string($db_data_entry_comment);
    // Now, let's insert this top-level group back into the table
    // as the new_year, with the new_group_id.
    $query = "INSERT INTO draft_groups(`group_id`,`group_name`,
                `title`,`public_note`,`definition`,`icon_filename`,`catalog_year`,
                `priority`,`delete_flag`,`data_entry_comment`, `catalog_repeat`,school_id)
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ";   
    $res2 = db_query($query, $new_group_id,$db_group_name,$db_title,$db_public_note,
                  $db_definition,$db_icon_filename,$new_year,
                  $db_priority,$db_delete_flag,$db_data_entry_comment,$db_catalog_repeat,$db_school_id);
  
    // Okay, now we need to go through the requirements for the group, and copy
    // those over to the new_year.
    $res3 = db_query("SELECT * FROM draft_group_requirements
                WHERE `group_id`='$db_group_id' ");
    while($cur3 = db_fetch_array($res3))
    {
      extract($cur3, 3, "db3");
  
      $child_group_id = 0;
      // Was there a child_group (a branch)?  If so, we need to copy that
      // over too, with a new child_group_id.
      if ($db3_child_group_id > 0)
      {
        // First, create the child group...
        $new_sub_group_id = $db->request_new_group_id();
        $subgroup_id_array[$db3_child_group_id] = $new_sub_group_id;
        $res4 = db_query("SELECT * FROM draft_group_requirements
                WHERE `group_id`='$db3_child_group_id' ");
        while($cur4 = db_fetch_array($res4))
        {
          extract($cur4, 3, "db4");
          $res5 = db_query("INSERT INTO draft_group_requirements
                      (`group_id`,`course_id`,`course_min_grade`,
                      `course_repeats`,`attributes`,`data_entry_value`)
                      VALUES (?,?,?,?,?,?) ",
                      $new_sub_group_id,$db4_course_id,
                      $db4_course_min_grade,$db4_course_repeats,$db4_attributes,
                      $db4_data_entry_value);
        }
        
        // Now, add the replace the db3_child_group_id with this new id
        // so it will get added as a requirement.
        $child_group_id = $new_sub_group_id;
      }
   
      // Add the row into the table...
      $res5 = db_query("INSERT INTO draft_group_requirements
                  (`group_id`,`course_id`,`course_min_grade`,
                  `course_repeats`,`attributes`,`data_entry_value`,`child_group_id`)
                  VALUES (?,?,?,?,?,?,?) ",
                    array($new_group_id,$db3_course_id,
                  $db3_course_min_grade,$db3_course_repeats,$db3_attributes,
                  $db3_data_entry_value,$child_group_id));
      
      
    }
  }
  
  // Store what groups we are working on, for other modules.
  $form_state['groups'] = $group_id_array;
  
     
  
  /////////////////////////////////////////////////////////////////////
  //  Now, on to transfering the degrees.
  //  We will have to use the groupIDArray we constructed earlier, which
  //  looks like $arr[old_id] = new_id.
  // Do the tracks first, since they are easier and straight forward...
  $res = db_query("SELECT * FROM draft_degree_tracks WHERE `catalog_year`='$old_year' ");
  while ($cur = db_fetch_array($res))
  {
    extract($cur, 3, "db");
    
    $res2 = db_query("INSERT INTO draft_degree_tracks
              (`catalog_year`,`major_code`,`track_code`,`track_title`,
              `track_short_title`,`track_description`,school_id)
              VALUES
              (?,?,?,?,?,?,?) ",
               $new_year,$db_major_code,$db_track_code,$db_track_title,
              $db_track_short_title,$db_track_description,$db_school_id);
    
  }
  // Now, let's do the degrees themselves.
  $res = db_query("SELECT * FROM draft_degrees WHERE `catalog_year`='$old_year' ");
  while ($cur = db_fetch_array($res))
  {
    extract($cur, 3, "db");
    
    $new_degree_id = $db->request_new_degree_id();
    
    // Store what degrees we are working on, for other modules.
    $form_state['degrees'][] = array(
      'src' => $db_degree_id,
      'src_catalog_year' => $old_year,
      'school_id' => $db_school_id,
      'dest' => $new_degree_id,
      'dest_major_code' => $db_major_code,
      'dest_catalog_year' => $new_year,
    );
    
    // add in the top-level degree to the table.
    $res2 = db_query("INSERT INTO draft_degrees
              (degree_id, major_code, degree_type, degree_level, degree_class, title,
               semester_titles_csv, catalog_year, exclude, public_note,
               allow_dynamic, advising_weight, override_degree_hours, min_tracks, max_tracks, default_tracks, track_selection_config, school_id)
               VALUES
              (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              ", $new_degree_id,$db_major_code,$db_degree_type, $db_degree_level, $db_degree_class, $db_title,
               $db_semester_titles_csv, $new_year, $db_exclude, $db_public_note,
               $db_allow_dynamic, $db_advising_weight, $db_override_degree_hours, $db_min_tracks, $db_max_tracks, $db_default_tracks, $db_track_selection_config,$db_school_id);             
    
    // now, pull out all of the degree_requirements.
    $res3 = db_query("SELECT * FROM draft_degree_requirements
                WHERE degree_id = ? ", array($db_degree_id));
    while($cur3 = db_fetch_array($res3))
    {
      extract($cur3, 3, "db3");
      // If there is a required group, we must convert it to the
      // new groupID !
      $required_group_id = intval($db3_group_id);
      if ($db3_group_id > 0 && trim($db3_group_id) != "")
      {
        $required_group_id = $group_id_array[$db3_group_id];
        if ($required_group_id < 1 || $required_group_id == "")
        {
          //die("could not find new group for $old_year $db3_group_id!  Group id is $required_group_id");
          fp_add_message(t("Couldn't find the specified group with ID $db3_group_id in catalog year $old_year, required by degree with ID $db_degree_id ($db_major_code).  The group was possibly deleted?
                            Be aware that any degrees in the new year will be missing this group requirement."), 'error');
        }
      }
       
      
      $res4 = db_query("INSERT INTO draft_degree_requirements
                (degree_id, semester_num, group_id, group_requirement_type,
                group_hours_required, group_min_hours_allowed, group_min_grade, course_id,
                course_min_grade, course_requirement_type, data_entry_value)
                VALUES
                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ", $new_degree_id, $db3_semester_num, $required_group_id, $db3_group_requirement_type,
                $db3_group_hours_required, $db3_group_min_hours_allowed, $db3_group_min_grade, $db3_course_id,
                $db3_course_min_grade, $db3_course_requirement_type, $db3_data_entry_value);
      
      
    }
    
    
  }  
  
  
  watchdog("admin", "Duplicated all degree/group/courses data from $old_year to $new_year");
    
     
  fp_add_message(t("The copy operation is now completed.  You may view the new year
                    by using the Data Entry links on the admin main menu.  Remember, you must
                    apply draft changes before they will be visible in FlightPath."));
  
  
}



/**
 * This is a systems settings form, which lets
 * the user edit advising variabled for FlightPath.
 */
function admin_advising_settings_form($school_id = 0) {
  $form = array();
  
    
  $school_id = intval($school_id);
  
  $fs = "";  // The field name suffix.  We will add this to the end of all of our field names.  If this is the default school, leave blank.
  if (module_enabled("schools")) {
    $school_name = schools_get_school_name_for_id($school_id);
    fp_set_title(t("Edit %school school advising settings", array('%school' => $school_name)));
    if ($school_id !== 0) {
      $fs = "~~school_" . $school_id;
    }
  }
  
  
  $form['school_id'] = array(
    'type' => 'hidden',
    'value' => $school_id,
  );
  
  
  
  
  $form["available_advising_term_ids" . $fs] = array(
    "type" => "textarea",
    "rows" => 2,
    "label" => t("Available advising term id(s)"),
    "value" => fp_space_csv(variable_get_for_school("available_advising_term_ids", "", $school_id, TRUE)),
    "description" => t("These are the terms for which advisors may advise a student to take
                        a course.  They should follow the structure established on the
                        school data settings page.
                        Separate term id's by commas. Ex: 200940, 200941, 200960. Make sure to enter
                        in the order that they should appear in FlightPath."),
  );  

  
  $form["advising_term_id" . $fs] = array(
    "type" => "textarea",
    "rows" => 2,
    "label" => t("Default advising term id(s)"),
    "value" => fp_space_csv(variable_get_for_school("advising_term_id", "", $school_id, TRUE)),
    "description" => t("Of the available term ids above, this is the default that FlightPath
                        is set to when an advisor logs in. Ex: 200940."),
  );  


  $form["current_catalog_year" . $fs] = array(
    "type" => "textfield",
    "size" => 10,
    "label" => t("Current catalog year"),
    "value" => variable_get_for_school("current_catalog_year", "", $school_id, TRUE),
    "description" => t("This is the year which What If loads degrees from, as well as other important functions.
                        Only change this once you have fully loaded a new catalog year."),
  );   

  
  $form["current_draft_catalog_year" . $fs] = array(
    "type" => "textfield",
    "size" => 10,
    "label" => t("Current DRAFT catalog year"),
    "value" => variable_get_for_school("current_draft_catalog_year", "", $school_id, TRUE),
    "description" => t("While in Draft mode, this is the year which Blank Degree Search loads degrees from.  What If
                        mode will always use the Current catalog year, set above.
                        You may change this while working on a new catalog.  It will not affect any other
                        users of the system.  While not working on a new catalog, set this
                        to the same as the Current catalog year."),
  );  

  
  $form["not_released_grades_terms" . $fs] = array(
    "type" => "textarea",
    "rows" => 2,
    "label" => t("NOT released grades terms"),
    "value" => fp_space_csv(variable_get_for_school("not_released_grades_terms", "", $school_id, TRUE)),
    "description" => t("Enter the term_id's, separated by commas, 
                        which are NOT released and should NOT be visible to either advisors or students. 
                        Coures in these terms will only show midterm grades or no grades at all. 
                        Ex: 201240, 201240:S1") . "<br>" . t("If left blank, grades will be visible to 
                        students and advisors as soon as they appear in the database."),
  );  


    
  
  return $form;
}




/**
 * Convienence function to get semester's default regular name.
 */
function admin_get_semester_name($semester_num) {    
  
  $semester = new Semester($semester_num);
  $title = $semester->title;
  
    
  /**
  $ar = array(t("Freshman Year"), t("Sophomore Year"), t("Junior Year"), t("Senior Year"));
  $s = $ar[$semester_num];
  if ($s == "")
  {
    $s = t("Year") . " " . ($semester_num + 1);
  }
  */
  
  return $title;
}



/**
 * This form lets the user apply draft changes (if they can supply the passcode)
 */
function admin_apply_draft_changes_form() {
  $form = array();
  $m = 0;
  
  $form["mark" . $m++] = array(
    "type" => "markup",
    "value" => t("You can use this form to apply your draft changes to the production database, making changes
                  to degrees, courses, and groups visible to all users of the system."),
  );
  
  $form["passcode"] = array(
    "type" => "password",
    "label" => t("For added security, you must enter the Apply Draft Changes password:"),
    "required" => TRUE,
    "description" => t("This is a password set up in FlightPath's System Settings, to provide an extra layer
                        of security for this powerful action."),
        
  );
  
  $form["submit"] = array(
    "type" => "submit",
    "value" => t("Submit"),
    "spinner" => TRUE,
    "description" => t("Note: This action may take several seconds to complete. Do not close this tab or refresh the browser."),
    "prefix" => "<hr>",
  );
  
  
    
  return $form;
}


/**
 * Handles the actual moving of draft courses into production.
 */
function admin_apply_draft_changes_form_submit($form, $form_submit) {
  $values = $form_submit["values"];
  
  $db = get_global_database_handler();
  
  $de_catalog_year = admin_get_de_catalog_year();
  
  // Check to make sure they entered the transfer passcode correctly.
    
  if ($values["passcode"] != variable_get("admin_transfer_passcode", sha1(mt_rand(1,9999999)))) {

    form_error("passcode", t("Error!  The password you entered is not correct.  Check with the FlightPath administrator
                              (or check the admin settings pages) to learn the password."));
    return;
    
  }

  // Keep the script from timing out prematurely...
  set_time_limit(99999);  // around 27 hours (so it runs a really long time).
       

  // First, set maintenance mode...
  variable_set("maintenance_mode", TRUE);
  
  // Okay, so what we gotta do is truncate the production tables,
  // then copy the draft tables in.
  $table_array = array(
    "courses",
    "degree_requirements",
    "degree_tracks",
    "degrees",
    "group_requirements",
    "groups",
  );


  foreach($table_array as $table_name) {
    $draft_table_name = "draft_$table_name";
    // First, truncate existing...
    $query = "truncate table `$table_name`";
    $res = db_query($query);
    // Now, copy in draft changes...
    $query = "INSERT INTO `$table_name`
            SELECT * FROM `$draft_table_name` ";
    $res = db_query($query);
  }


  $db2 = new DatabaseHandler();
  // Now, we need to go through the draft_instructions table,
  // and perform each instruction one at a time.
  $res = db_query("SELECT * FROM draft_instructions
            ORDER BY `id` ");
  while($cur = db_fetch_array($res))
  {
    $instruction = trim($cur["instruction"]);

    $temp = explode(",",$instruction);

    if (trim($temp[0]) == "update_course_id") {
      $db2->update_course_id(trim($temp[1]), trim($temp[2]), trim($temp[3]));
    }

    if (trim($temp[0]) == "update_course_requirement_from_name") {
      $db2->update_course_requirement_from_name(trim($temp[1]), trim($temp[2]), trim($temp[3]), trim($temp[4]));
    }
    
    // TODO:  Maybe invoke another hook here, to let other modules act on the instruction?
    
  } 

  // Once this is done, truncate the draft_instructions table.
  $res = db_query("TRUNCATE TABLE draft_instructions");


  // Invoke a hook to allow other modules to apply_draft_changes as well
  invoke_hook("apply_draft_changes");


  // Rebuild our course cache file.
  unset($_SESSION['fp_cache_course_inventory_last_generated']);
  if (file_exists(fp_get_files_path() . "/cache_data/courses_serialized.info")) {
    $x = unlink(fp_get_files_path() . "/cache_data/courses_serialized.info");
    if (!$x) {
      fpm("Cannot delete cache_data/courses_serialized.info under custom/files.  Permission error or file does not exist?");
      watchdog("system", "Cannot delete cache_data/courses_serialized.info under custom/files.  Permission error or file does not exist?", array(), WATCHDOG_ERROR);    
    }
  }
  variable_set('cache_course_inventory_last_generated', 0);  // reset this so it will be regenerated.
    
  // Builds new courses cache file on the hard drive.
  system_reload_and_cache_course_inventory();

  // And we are done!  Set maintenance mode back to none
  variable_set("maintenance_mode", FALSE);

  // Send emails to notify programmers...
  $notify = variable_get("notify_apply_draft_changes_email_address", "");  
  if ($notify != "") {
    mail($notify, "FlightPath Apply Draft Changes", "Someone has applied draft changes to FlightPath, which updated degree plans, groups, and courses.");
  }
  
  fp_add_message(t("Successfully updated the production database with draft changes.  Your changes are now live and visible on production for all users."));

  watchdog("admin", "Draft changes applied.");
 
  
}




/**
 * Get the "de_catalog_year" from the REQUEST.
 * If it's not there or invalid, pull it from our system settings.
 */
function admin_get_de_catalog_year($bool_set_earliest_if_blank = TRUE, $school_id = 0) {
  global $current_student_id;
  $db = get_global_database_handler();
  if ($current_student_id) {
    $school_id = $db->get_school_id_for_student_id($current_student_id);
  }  
    
    
  $de_catalog_year = @$_REQUEST["de_catalog_year"];
  
  if ($bool_set_earliest_if_blank) {
    if (!$de_catalog_year || $de_catalog_year < variable_get_for_school("earliest_catalog_year", 2006, $school_id)) {
      $de_catalog_year = variable_get_for_school("earliest_catalog_year", 2006, $school_id);
    }
  }
  
  return $de_catalog_year;  
}


/**
 * This is an implementation of hook_menu_handle_replacement_pattern.
 * It will search for and replace replacement patterns which we are aware of it in $str.
 */
function admin_menu_handle_replacement_pattern($str) {
  
  if (strpos($str, "%DE_CATALOG_YEAR%") !== 0) {
    // It contains this replacement pattern!
    $str = str_replace("%DE_CATALOG_YEAR%", admin_get_de_catalog_year(), $str);
  }
  
  if (strpos($str, "%SEV_FILTER%") !== 0) {
    // It contains this replacement pattern!
    $str = str_replace("%SEV_FILTER%", @$_GET["sev_filter"], $str);
  }

  if (strpos($str, "%TYPE_FILTER%") !== 0) {
    // It contains this replacement pattern!
    $str = str_replace("%TYPE_FILTER%", @$_GET["type_filter"], $str);
  }
  
  
  if (strpos($str, "%PAGE%") !== 0) {
    // It contains this replacement pattern!
    $str = str_replace("%PAGE%", @$_GET["page"], $str);
  }
    
  
  
  return $str;
}


function admin_perm() {
  return array(
    "can_access_admin_tools" => array(
      "title" => t("Access Admin Tools"),
      "description" => t("Allow the user to access the Admin Tools screen."),
    ),  
    "can_access_admin" => array(
      "title" => t("Access administrative console"),
      "description" => t("This is a powerful permission!  This allows a 
                          user to access the 'admin console' for FlightPath."),
    ),
    "can_edit_urgent_message" => array(
      "title" => t("Edit urgent message"),
      "description" => t("The user may edit the 'Urgent Message' which appears at the top of every page, if set."),
    ),    
    "can_access_data_entry" => array(
      "title" => t("Access Data Entry"),
      "description" => t("The user can access (view) the data-entry portion of the admin console. Degree plans, groups, and courses."),
    ),
    "can_edit_data_entry" => array(
      "title" => t("Edit Data Entry"),
      "description" => t("This is a powerful permission! The user can edit degree plans, groups, and courses."),
    ),
    "can_delete_data_entry" => array(
      "title" => t("Delete Data Entry items"),
      "description" => t("This is a VERY powerful permission!  The user can delete degree plans, groups, and courses."),
    ),
    "can_view_advanced" => array(
      "title" => t("View advanced"),
      "description" => t("The user may see advanced information on-screen, for example, internal ID numbers for degrees and courses."),
    ),   
    "can_apply_draft_changes" => array(
      "title" => t("Apply draft changes"),
      "description" => t("The user may move draft changes into production."),
    ),   
    "can_edit_advising_settings" => array(
      "title" => t("Edit advising settings"),
      "description" => t("The user may edit advising settings, like available term IDs and the current catalog year."),
    ),   
    "display_watchdog" => array(
      "title" => t("View watchdog (log) entries"),
      "description" => t("The user may view the recent watchdog log entries.  This represents a security concern, so give this only to trusted users."),
    ),   

    
            
  );
} 
 

 
/**
 * Meant to be fed into "fp_system_settings_form()", this function
 * returns an array which will automatically save values to our "variables" table. 
 */
function admin_urgent_message_form() {
  $form = array();

  $form["mark_top"] = array(
    "type" => "markup",
    "value" => "<p>" . t("Any message you enter here will be displayed at the top of every page <b>for all users</b> in the system. 
                  This is used to alert users that the system is about to be taken offline, or any other urgently-needed information.") . "</p>",
                  
  );
  
  $form["urgent_msg"] = array(
    "type" => "textarea",
    "label" => "Global Urgent Message:",
    "value" => variable_get("urgent_msg", ""),
    'description' => t("To delete this message, simple delete all the text in this box and save."),
  );
  
  return $form;
}
 
  

  
  
/**
 * Display the details of a particular watchdog entry, specified by its table id.
 */
function admin_display_watchdog_entry($wid) {
  $rtn = "";
  
  fp_add_css(fp_get_module_path("admin") . '/css/admin.css');
  
  
  $severity_array = array(
    5 => "notice",
    1 => "alert",
    3 => "error",
    7 => "debug",
  );
  
  $res = db_query("SELECT * FROM watchdog WHERE wid = '?' ", $wid);
  $cur = db_fetch_object($res);
  
  $msg = t($cur->message, unserialize($cur->variables));
  
  $severity = $severity_array[$cur->severity];
  $when = format_date(convert_time($cur->timestamp), "short");
    
  // Display
  $rtn .= "
    <br>
    <div class='watchdog-entry'>
      <div class='watchdog-field'>
        <label>ID:</label>
        $cur->wid
      </div>

      <div class='watchdog-field'>
        <label>Type:</label>
        $cur->type
      </div>
      

      <div class='watchdog-field'>
        <label>Time:</label>
        $when ($cur->timestamp)
      </div>
      
      <div class='watchdog-field'>
        <label>Severity:</label>
        $severity
      </div>

      <div class='watchdog-field'>
        <label>User:</label>
        $cur->user_name | id: $cur->user_id | cwid: $cur->cwid | is_student: $cur->is_student | is_faculty: $cur->is_faculty
      </div>
      
      <div class='watchdog-field'>
        <label>IP:</label>
        $cur->ip
      </div>
                              
      <div class='watchdog-field'>
        <label>Location:</label>
        $cur->location
      </div>
                      
      <div class='watchdog-field'>
        <label>Ref:</label>
        $cur->referer
      </div>

      <hr>
      
      <div class='watchdog-field'>
        <label class='block'>Message:</label>
        $msg
      </div>
      
      <div class='watchdog-field'>
        <label class='block'>Extra:</label>
        $cur->extra_data
      </div>      
                                                            
      
    </div>
  ";
  
  
  
  
  return $rtn;
}  
  
  


/**
 * Displays recent watchdog entries, from the watchdog table
 *
 */
function z__admin_display_watchdog() {
  
  fp_add_css(fp_get_module_path("admin") . '/css/admin.css');
  
  $rtn = "";

  $rtn .= "<p>View recent watchdog entries</p>";
  
  $severity_array = array(
    5 => "notice",
    1 => "alert",
    3 => "error",
    7 => "debug",
  );
  
  $results_per_page = 50;
  
  
  
  $type_line = $severity_line = $limit_start = "";

  @$sev_filter = $_GET["sev_filter"];
  @$type_filter = $_GET["type_filter"];
  @$page = $_GET["page"];
  
  $limit_start = 0;
  if ($page != "" && is_numeric($page)) {
    $limit_start = $results_per_page * ($page - 1);
  }
  else {
    $page = 1;
  }

  
  
  // Filters:
  $rtn .= "<form method='GET' action='" . fp_url("admin/config/watchdog") . "' class='watchdog-filters'>
            ";
  
  $rtn .= "Filter by:
           <span class='type-filter'>
            Type:
            <select name='type_filter'>
              <option value=''>-Any-</option>";
  $res = db_query("SELECT distinct(type) as type 
                   FROM watchdog 
                   ORDER BY type");
  while ($cur = db_fetch_object($res)) {
    $sel = ($type_filter == $cur->type) ? "selected" : "";
    $rtn .= "<option value='$cur->type' $sel>$cur->type</option>";
  }  
  
  
  $rtn .= "</select>
            </span>";

  
  $rtn .= "
            <span class='severity-filter'>
            Severity:
            <select name='sev_filter'>
              <option value=''>-Any-</option>";
  foreach ($severity_array as $key => $value) {
    $sel = "";
    if ($sev_filter == $key) $sel = "selected";
     
    $rtn .= "<option value='$key' $sel>$value</option>";
  }  
  
  $rtn .= "</select>
            </span>";
  
  
  
  
  $rtn .= "<input type='submit' value='&gt;'>";
  // Hack if clean URLs are not enabled:
  $rtn .= "<input type='hidden' name='q' value='admin/config/watchdog'>";
  
  $rtn .= "</form>";
  
  $params = array();

  if (@$_GET["type_filter"] != "") {
    //$type_line = " AND type = '" . mysql_real_escape_string($_GET["type_filter"]) . "' ";
    $type_line = " AND `type` = :type ";
    $params[":type"] = $_GET["type_filter"];
  }
    
  if (@$_GET["sev_filter"] != "") {
    //$severity_line = " AND severity = '" . mysql_real_escape_string($_GET["sev_filter"]) . "' ";
    $severity_line = " AND severity = :sev ";
    $params[":sev"] = $_GET["sev_filter"]; 
  }
  

  $pol = "even";
  
  $rtn .= "<table class='watchdog-table' cellspacing='0' cellpadding='4'>
              <tr>
                <th>ID</th>
                <th>When</th>
                <th>Type</th>
                <th>Msg</th>
                <th>Severity</th>
                <th>User</th>
              </tr>";
  // Okay, let's display the recent watchdog entries.
  $query = "SELECT * FROM watchdog
                   WHERE 1
                   $type_line
                   $severity_line
                   ORDER BY wid DESC
                   ";
  $res = db_query($query . " LIMIT $limit_start, $results_per_page", $params);
  while ($cur = db_fetch_object($res)) {
    $pol = ($pol == "even") ? "odd" : "even";
    
    $o_msg = t($cur->message, unserialize($cur->variables));
    $o_type = $cur->type;
    
    // shorten msg if necessary
    $msg = substr(strip_tags($o_msg), 0, 130);
    if ($msg != $o_msg) {
      $msg = trim($msg) . "...";
    }
    
    $type = substr($o_type, 0, 20);
    if ($type != $o_type) {
      $type = trim($type) . "...";
    }

    
    
    $severity = $severity_array[$cur->severity];
    $when = format_date(convert_time($cur->timestamp), "short");
    
        
    $rtn .= "
              <tr class='row-$pol row-$severity'>                
                <td valign='top'>" . l($cur->wid, "admin/config/watchdog/$cur->wid", "sev_filter=$sev_filter&type_filter=$type_filter&page=$page") . "</td>
                <td valign='top'>$when</td>
                <td valign='top'>$type</td>                
                <td valign='top'>$msg</td>                
                <td valign='top'>$severity</td>                
                <td valign='top'>$cur->user_name</td>                
              
              </tr>    
    
            ";
    
  } 
  
  
  $rtn .= "</table>";
  
  // Now, do the page
  
  // Figure out the total number of results
  $total = db_result(db_query("SELECT count(wid) as count
                               FROM watchdog WHERE 1 
                               $type_line 
                               $severity_line", $params));
  
  
  // Now, divide by the number of results per page.
  $pages = ceil($total / $results_per_page);

  $base_query = "sev_filter=$sev_filter&type_filter=$type_filter";
   
  $rtn .= "<div class='fp-pager'>";
  if ($page > 1) {
    $rtn .= "<span class='pager-link pager-first'>" . l("&laquo; first", "admin/config/watchdog", $base_query . "&page=1") . "</span>";
    $rtn .= "<span class='pager-link pager-prev'>" . l("&lt; prev", "admin/config/watchdog", $base_query . "&page=" . ($page - 1)) . "</span>";
  }
  else {
    $rtn .= "<span class='pager-link pager-first'>&laquo; first</span>";
    $rtn .= "<span class='pager-link pager-prev'>&lt; prev</span>";    
  }
   
  // page numbers here
  // Let's get the previous X page numbers, and next X (if possible)
  $start_page_num = $page - 5;
  if ($start_page_num < 1) $start_page_num = 1;
  $end_page_num = $page + 5;
  if ($end_page_num > $pages) $end_page_num = $pages;
  
  if ($start_page_num > 1) {
    $rtn .= "<span class='pager-elip'>...</span>";
  }
  
  for ($t = $start_page_num; $t <= $end_page_num; $t++) {
    if ($page == $t) {
      // current page
      $rtn .= "<span class='pager-link pager-number pager-current'>$t</span>";      
    }
    else {
      $rtn .= "<span class='pager-link pager-number'>" . l($t, "admin/config/watchdog", $base_query . "&page=$t") . "</span>";
    }
  } 

  
  if ($end_page_num < $pages) {
    $rtn .= "<span class='pager-elip'>...</span>";
  }
  
  
   
  if ($page < $pages) {
    $rtn .= "<span class='pager-link pager-next'>" . l("next &gt;", "admin/config/watchdog", $base_query . "&page=" . ($page + 1)) . "</span>";
    $rtn .= "<span class='pager-link pager-last'>" . l("last &raquo;", "admin/config/watchdog", $base_query . "&page=$pages") . "</span>";
  }
  else {
    $rtn .= "<span class='pager-link pager-next'>next &gt;</span>";
    $rtn .= "<span class='pager-link pager-last'>last &raquo;</span>";    
  }
  
  $rtn .= "</div>";
  
  
  
  
  return $rtn;
  
}




function admin_display_watchdog() {
  
  fp_add_css(fp_get_module_path("admin") . '/css/admin.css');
  
  $rtn = "";

  $rtn .= "<p>View recent watchdog entries</p>";
  
  $severity_array = array(
    5 => "notice",
    1 => "alert",
    3 => "error",
    7 => "debug",
  );
  
  $results_per_page = 50;
  
  
  
  $type_line = $severity_line = $limit_start = "";

  @$sev_filter = $_GET["sev_filter"];
  @$type_filter = $_GET["type_filter"];
  @$page = intval($_GET["page"]);
  
  $limit_start = 0;
  if ($page > 0) {
    $limit_start = $results_per_page * ($page - 1);
  }
  

  
  
  // Filters:
  $rtn .= "<form method='GET' action='" . fp_url("admin/config/watchdog") . "' class='watchdog-filters'>
            ";
  
  $rtn .= "Filter by:
           <span class='type-filter'>
            Type:
            <select name='type_filter'>
              <option value=''>-Any-</option>";
  $res = db_query("SELECT distinct(type) as type 
                   FROM watchdog 
                   ORDER BY type");
  while ($cur = db_fetch_object($res)) {
    $sel = ($type_filter == $cur->type) ? "selected" : "";
    $rtn .= "<option value='$cur->type' $sel>$cur->type</option>";
  }  
  
  
  $rtn .= "</select>
            </span>";

  
  $rtn .= "
            <span class='severity-filter'>
            Severity:
            <select name='sev_filter'>
              <option value=''>-Any-</option>";
  foreach ($severity_array as $key => $value) {
    $sel = "";
    if ($sev_filter == $key) $sel = "selected";
     
    $rtn .= "<option value='$key' $sel>$value</option>";
  }  
  
  $rtn .= "</select>
            </span>";
  
  
  
  
  $rtn .= "<input type='submit' value='&gt;'>";
  // Hack if clean URLs are not enabled:
  $rtn .= "<input type='hidden' name='q' value='admin/config/watchdog'>";
  
  $rtn .= "</form>";
  
  
  
  
  
  $params = array();

  if (@$_GET["type_filter"] != "") {
    //$type_line = " AND type = '" . mysql_real_escape_string($_GET["type_filter"]) . "' ";
    $type_line = " AND `type` = :type ";
    $params[":type"] = $_GET["type_filter"];
  }
    
  if (@$_GET["sev_filter"] != "") {
    //$severity_line = " AND severity = '" . mysql_real_escape_string($_GET["sev_filter"]) . "' ";
    $severity_line = " AND severity = :sev ";
    $params[":sev"] = $_GET["sev_filter"]; 
  }
  

  $pol = "even";
  
  
  $table_headers = array();
  $table_headers[] = array("label" => "ID", "field" => "wid");  
  $table_headers[] = array("label" => "When", "field" => "a.timestamp");  
  $table_headers[] = array("label" => "Type", "field" => "a.type");  
  $table_headers[] = array("label" => "Msg");  
  $table_headers[] = array("label" => "Severity", "field" => "a.severity");  
  $table_headers[] = array("label" => "User", "field" => "user_name");
     
  // Set our initial sort, if none is already set.   
  theme_table_header_sortable_set_initial_sort("wid", 'DESC');  
  
  $rtn .= "<table class='watchdog-table' cellspacing='0' cellpadding='4'>";
  // Draw our our table headers, with links....
  $rtn .= theme_table_header_sortable($table_headers);    
  
              
              
  // Get our order by clause based on selected table header, if any.    
  $order_by = theme_table_header_sortable_order_by($table_headers);  
  $res = pager_query("SELECT * FROM watchdog a
                       WHERE 1
                       $type_line
                       $severity_line                                                                              
                       $order_by", $params, 50, 0, "SELECT COUNT(wid) FROM watchdog a 
                                                     WHERE 1
                                                     $type_line
                                                     $severity_line                                                                              
                                                     $order_by", $params);      
  
  
  while ($cur = db_fetch_object($res)) {
    $pol = ($pol == "even") ? "odd" : "even";
    
    $o_msg = t($cur->message, unserialize($cur->variables));
    $o_type = $cur->type;
    
    // shorten msg if necessary
    $msg = substr(strip_tags($o_msg), 0, 130);
    if ($msg != $o_msg) {
      $msg = trim($msg) . "...";
    }
    
    $type = substr($o_type, 0, 20);
    if ($type != $o_type) {
      $type = trim($type) . "...";
    }

    
    
    $severity = $severity_array[$cur->severity];
    $when = format_date(convert_time($cur->timestamp), "short");
    
        
    $rtn .= "
              <tr class='row-$pol row-$severity'>                
                <td valign='top'>" . l($cur->wid, "admin/config/watchdog/$cur->wid", "sev_filter=$sev_filter&type_filter=$type_filter&page=$page") . "</td>
                <td valign='top'>$when</td>
                <td valign='top'>$type</td>                
                <td valign='top'>$msg</td>                
                <td valign='top'>$severity</td>                
                <td valign='top'>$cur->user_name</td>                
              
              </tr>    
    
            ";
    
  } 
  
  
  $rtn .= "</table>";
  
  
  
  // Display the pager that was generated by the pager_query above!  
  $rtn .= theme_pager(); 
  
  
  
  return $rtn;
  
} // admin display watchdog







/**
 * This is the "main" page for the admin module.  It's what the user
 * first sees when the click to go to the Admin page.
 */
function admin_display_main() {
  
  // Use default_school.
  $de_catalog_year = admin_get_de_catalog_year(FALSE, 0);
  
  // Has the system cron been run recently?
  $cron_last_run = variable_get("cron_last_run", 0);     
  if ($cron_last_run < strtotime("-7 DAY")) {
    // Warn admin that they need to have cron set up!  It's been over a week!
    fpm(t("Your system's cron process hasn't run in over a week.  In order for FlightPath
            to continue to function properly, a cron process much be configured.
            You may @run_link or see the @status_link page for instructions.", 
            array("@status_link" => l(t("System status"), "admin/config/status"),
                  "@run_link" => l(t("run cron now"), "admin/config/run-cron"))));
  }
  
  
  $rtn = "";

  fp_add_css(fp_get_module_path("admin") . "/css/admin.css");
  fp_add_js(fp_get_module_path("admin") . "/js/admin.js");
  
  $rtn .= "<table class='fp-semester-table admin-display-main-table' cellpadding='5'>
           <tr>
            <td valign='top' class='system-configuration-left'>
              " . fp_render_menu_block(t("System Configuration"), "admin/config") . "
            </td>
            <td valign='top' class='advising-settings-right'>
              ";
              

  // Advising Settings
  
  
  
  $rtn .= fp_render_section_title("Advising Settings", "admin-advising-settings");
    
  $defs = array(0 => '');
  if (module_enabled("schools")) {
    $defs = schools_get_school_definitions();
  }
  
  foreach ($defs as $school_id => $school_name) {
    $rtn .= "<div class='admin-advising-settings'><!--SCHOOL_NAME-->
               
         <ul>
          <li>" . t("Available terms for advising: %v", array("%v" => fp_space_csv(variable_get_for_school("available_advising_term_ids", "", $school_id)))) . "</li>
          <li>" . t("Default advising term(s): %v", array("%v" => fp_space_csv(variable_get_for_school("advising_term_id", "", $school_id)))) . "</li>          
          <li>" . t("Current catalog year: %v", array("%v" => variable_get_for_school("current_catalog_year", "", $school_id))) . "</li>       
          <li>" . t("Current draft catalog year: %v", array("%v" => variable_get_for_school("current_draft_catalog_year", "", $school_id))) . "</li>             
          <li>" . t("Not released grades terms: %v", array("%v" => fp_space_csv(variable_get_for_school("not_released_grades_terms", "", $school_id)))) . "</li>             
          
        </ul>";
    
    $url_suffix = "";
    if (intval($school_id) != 0) {
      $url_suffix .= "/" . $school_id;
    }
    
    if (user_has_permission("can_edit_advising_settings")) {
      $rtn .= l("<i class='fa fa-pencil'></i> " . t("Edit Advising Settings") . "<!--SCHOOL_EDIT_LINK-->", "admin/edit-advising-settings" . $url_suffix);
    }
  
    if ($school_name) {
      $rtn = str_replace("<!--SCHOOL_NAME-->", "<label>" . $school_name . "</label>", $rtn);
      $rtn = str_replace("<!--SCHOOL_EDIT_LINK-->", t(" for ") . "<em>$school_name</em>", $rtn);
    }
    
    $rtn .= "</div>";
    
  } // foreach
  
  
    

                            
              
  $rtn .= "</td>
                        
           </tr>";
  $rtn .= "</table><br>"; // close table


  // TODO:  Similar to the advising settings, do we just loop for each school?  
  $current_catalog_year = variable_get("current_catalog_year", 2006);   // TODO: how to figure out school?
  $earliest_catalog_year = variable_get("earliest_catalog_year", 2006);  // TODO:  how to figure out school?
  
  
  if (user_has_permission("can_access_data_entry")) {
    $rtn .= fp_render_section_title("Degree & Course Management", "degree-course-management");
   
    $rtn .= "<div class='data-entry-cats'>";

    // Have a pulldown here of years, then use javascript to hide/show relavant groups.
    $rtn .= "&nbsp; &nbsp; &nbsp; " . t("Select a catalog year") . ": <select id='data-entry-select-cats' onChange='adminHideDECats();'>";
    $selected_cat = ($de_catalog_year != "") ? $de_catalog_year : $current_catalog_year;
    
    for ($t = $current_catalog_year +1; $t >= $earliest_catalog_year; $t--) {
      $sel = ($t == $selected_cat) ? "selected" : "";
      $rtn .= "<option value='$t' $sel>$t-" . ($t+1) . "</option>";
    }
    $rtn .= "</select>";
    
    for ($t = $current_catalog_year +1; $t >= $earliest_catalog_year; $t--) {
      $rtn .= "<ul class='data-entry-for-cat data-entry-for-cat-$t'>";
      $rtn .= "<li>" . l(t("Degree plans for @year", array("@year" => "$t-" . ($t+1))), "admin/degrees", "de_catalog_year=$t") . "</li>";
      $rtn .= "<li>" . l(t("Groups for @year", array("@year" => "$t-" . ($t+1))), "admin/groups", "de_catalog_year=$t") . "</li>";
      $rtn .= "<li>" . l(t("Courses for @year", array("@year" => "$t-" . ($t+1))), "admin/courses", "de_catalog_year=$t") . "</li>";
      $rtn .= "</ul>";
    }
        
    if (user_has_permission("can_edit_data_entry")) {
      $rtn .= "<b>" . t("Administrator function:") . "</b><ul>
              <li>" . l(t("Duplicate entire year worth of data to new year"), "admin/duplicate-year") . "</li>
                </ul>";
    }
    
    
    $rtn .= "</div>";
    
    // Draft changes?
    $res = db_query("SELECT * FROM draft_instructions");
    if (db_num_rows($res) > 0) {
      $rtn .= "<div class='draft-changes-waiting-msg'>
                      " . t("Draft changes have been made which have yet to be applied.
                      When you are ready for your draft changes to appear in
                      production, click the link below.") . "</div>";
    }
    $rtn .= "<ul class='data-entry-draft-waiting'>
              <li>" . l(t("Apply draft changes"), "admin/apply-draft-changes") . "</li>
           </ul>";
        
  }

  
  
  
  
  
  
  
  
    
  return $rtn;
}




